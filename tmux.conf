# Ring the bell if any background window rang a bell
set -g bell-action any

set -g base-index 1
setw -g pane-base-index 1
setw -g pane-border-format "#{?pane_title, #{pane_title} ,}"

set-hook -g after-split-window 'select-pane -T ""'
set-hook -g after-new-window 'select-pane -T ""'
set-hook -g after-new-session 'select-pane -T ""'

# force tmux to use utf-8
setw -gq utf8 on
set -gq status-utf8 on
set -g history-limit 50000

# Make sure we have true colors
set -g default-terminal 'xterm-256color'
set-option -ga terminal-overrides ',xterm-256color:Tc'

# Screen like binding
set -g prefix C-b

# Keep your finger on ctrl, or don't
bind-key ^D detach-client
bind-key 'C-p' previous-window
bind-key 'j' previous-window
bind-key 'C-j' previous-window
bind-key 'k' next-window
bind-key 'C-k' next-window
bind-key 'C-n' next-window

# Create splits and vertical splits
bind-key ^V split-window -h -c '#{pane_current_path}'
bind-key ^S split-window -v -c '#{pane_current_path}'
bind-key V split-window -h -c '#{pane_current_path}'
bind-key c new-window -c "#{pane_current_path}"

# Panes joining
bind-key 'm' select-pane -m # mark
bind-key 'M' select-pane -M # unmark
bind-key '<' join-pane -h
bind-key '>' break-pane # Break out the current pane to a window

# Information
bind-key -r O run-shell "tmux split-window -v -f -c '#{pane_current_path}' ~/.dotfiles/bin/cht.sh"
bind-key -r 'C-i' run-shell "tmux new-window -c '#{pane_current_path}' ~/.dotfiles/bin/man.sh"
bind-key -r 'C-g' run-shell "tmux select-window -t lazygit || tmux new-window -n lazygit -c '#{pane_current_path}' lazygit"
bind-key -r 'C-t' run-shell "tmux select-window -t bpytop || tmux new-window -n bpytop -c '#{pane_current_path}' bpytop"
bind-key -r 'C-f' run-shell "~/.dotfiles/bin/launch-sessionizer.sh"


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-q' if-shell "$is_vim" 'send-keys M-q' 'kill-pane'


bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# # Pane resize in all four directions using vi bindings.
# # Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

set-window-option -g mouse on

# Patch for OS X pbpaste and pbcopy under tmux.
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"

#
# Fix VISUAL shortcuts for TMUX
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down
bind-key -T copy-mode-vi Escape send-keys -X clear-selection
bind-key -T copy-mode-vi i send-keys -X cancel
unbind-key -T copy-mode-vi p     ;   bind-key -T copy-mode-vi p   send-keys -X paste-buffer
unbind-key -T copy-mode-vi Space ;   bind-key -T copy-mode-vi v   send-keys -X begin-selection
unbind-key -T copy-mode-vi V     ;   bind-key -T copy-mode-vi V   send-keys -X start-of-line        \; send-keys -X begin-selection \; send-keys -X end-of-line
unbind-key -T copy-mode-vi Enter ;   bind-key -T copy-mode-vi y   send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
unbind-key -T copy-mode-vi Y     ;   bind-key -T copy-mode-vi Y   send-keys -X start-of-line        \; send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
unbind-key -T copy-mode-vi C-v   ;   bind-key -T copy-mode-vi C-v send-keys -X begin-selection      \; send-keys -X rectangle-toggle
unbind-key -T copy-mode-vi [     ;   bind-key -T copy-mode-vi [   send-keys -X begin-selection
unbind-key -T copy-mode-vi ]     ;   bind-key -T copy-mode-vi ]   send-keys -X copy-selection
bind-key -T copy-mode-vi O   send-keys -X copy-pipe-and-cancel "xargs open"

# Setup 'v' to begin selection as in Vim
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display 'Reloaded!'

# easymotion
set -g @easy-motion-default-motion "bd-w"
set -g @easy-motion-prefix "^Space"

bind-key v next-layout
bind-key -T copy-mode-vi v send-keys -X begin-selection

# Status styles
set-option -g status 'on'
set-option -g status-interval 2
set-option -g status-style none,align=left
set-option -g status-left-style none
set-option -g status-left-length '80'
set-option -g status-right-style none
set-option -g status-right-length '80'
set-window-option -g window-status-activity-style none
set-window-option -g window-status-separator ''

# ############################
# ## COLORSCHEME
# ############################

# default statusbar colors
set-option -ga status-style bg=colour237,fg=colour223 #bg=bg1 fg=fg1

# pane border
set-option -g pane-active-border-style "fg=colour250" #fg2
set-option -g pane-border-style "fg=colour250" #bg1

# message infos
set-option -g message-style bg=colour239,fg=colour223 #bg=bg2 fg=fg1

# writting commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 #bg=fg3 fg=bg1

# pane number display
set-option -g display-panes-active-colour colour250 #fg2
set-option -g display-panes-colour colour237 #bg1

# clock
set-window-option -g clock-mode-colour colour109 #blue

# bell
set-window-option -g window-status-bell-style fg=colour235,bg=colour167 #bg, red

# default window title colors
set-window-option -ga window-status-style bg=colour75,fg=colour237 #bg=yellow fg=bg1
# Set status line style for windows with an activity alert
set-window-option -ga window-status-activity-style bg=colour237,fg=colour248 #bg=bg1 fg=fg3
# active window title colors
set-window-option -ga window-status-current-style bg=default,fg=colour237 #fg=bg1

# window titles
set-window-option -g window-status-format '#[fg=colour237,bg=colour239,none]#[fg=colour223,bg=colour239] #I  #W #[fg=colour239, bg=colour237, none]'
set-window-option -g window-status-current-format '#[fg=colour237,bg=colour75,none]#[fg=colour239, bg=colour75,bold]#{?window_zoomed_flag,#[fg=colour132],#[none]} #I  #W #[fg=colour75,bg=colour237,none]'

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-left '#[fg=colour248,bg=colour241] #S #[fg=colour241, bg=colour237, none]'
set-option -g status-right '#[fg=colour239,bg=colour237,none]#[fg=colour246,bg=colour239] %Y-%m-%d  %H:%M #[fg=colour248, bg=colour239,none]#[fg=colour237, bg=colour248] #h '

set -g @easy-motion-dim-style "fg=colour242"
set -g @easy-motion-highlight-style "fg=colour75,bold"
set -g @easy-motion-highlight-2-first-style "fg=colour45,bold"
set -g @easy-motion-highlight-2-second-style "fg=colour39,bold"

#####################
## End of COLORSCHEME
#####################

# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'

# TPM
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'IngoMeyer441/tmux-easy-motion' 
# continuum
set -g @continuum-restore 'on'

# resurrect
set -g @resurrect-strategy-vim 'session'

# yank
if-shell "test expr '$OSTYPE' : 'darwin.*' > /dev/null" "set-option -g default-command 'reattach-to-user-namespace -l $SHELL'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm' 

